'''
Importing Necessary Libraries.
'''

import json
import time

import numpy as np
import pandas as pd

from datetime import datetime

import os
from dotenv import load_dotenv

load_dotenv("../.env")

import sys

sys.path.append("../Scripts/")
sys.path.append("../")

import paths
import config

def GenerateRawDF(DF:pd.DataFrame) -> pd.DataFrame:
    '''
    Dummy Function that takes in input a DataFrame, reformats the Date Column and returns the formatted df.
    '''
    
    DF["Date"] = RawDF["Date_GMT+1_Europe/Berlin"].apply(lambda x: datetime.strptime(x.replace("T", " "), "%Y-%m-%d %H:%M"))
    DF.drop("Date_GMT+1_Europe/Berlin", axis = 1, inplace = True)
    
    return DF

def EngineerFeatures(DF:pd.DataFrame) -> pd.DataFrame:
    '''
    Main Function use to Engineer our Data.
    It takes as input a DataFrame (previously generated by our function FetchHistoricalData in sourcing.py)
    Lastly it returns our WrangledDF.
    '''

    CitiesSubRegion = config.CitiesSubRegion
    
    #Date Feature Engineering - Then Dropping the Column
    DF["Date"] = DF["Date_GMT+1_Europe/Berlin"].apply(lambda x: datetime.strptime(x.replace("T", " "), "%Y-%m-%d %H:%M"))
    DF.drop("Date_GMT+1_Europe/Berlin", axis = 1, inplace = True)

    #Sub-Region Feature Engineering - Then Dropping the Column
    DF["SubRegion"] = DF["CityID"].apply(lambda x: next((z[1] for z in CitiesSubRegion if x == z[0]), None))
    DF.drop("CityID", axis = 1, inplace = True)

    #Season Feature Engineering 
    DF["Season"] = DF["Date"].apply(lambda x: "Winter" if ((x.month >= 12 and x.day >= 21) or (x.month < 3) or (x.month == 3 and x.day <= 20)) 
                                        else "Spring" if ((x.month >= 3 and x.day >= 21) or (x.month < 6) or (x.month == 6 and x.day <= 20))  
                                        else "Summer" if ((x.month >= 6 and x.day >= 21) or (x.month < 9) or (x.month == 9 and x.day <= 22)) 
                                        else "Autumn" if ((x.month >= 9 and x.day >= 23) or (x.month < 12) or (x.month == 12 and x.day <= 20)) 
                                        else "NoSeasonFound")

    #Quick Check
    if "NoSeasonFound" in list(DF):
        raise DataIntegrityError("There's been an Error in Categorizing Data in Seasons!!")

    else:
        print("Check Passed, Datetimes correctly Transformed in Seasons!")
    
    #Hour Feature Engineering - Then Dropping the Column Date
    DF["Hour"] = DF["Date"].apply(lambda x: x.hour)
    DF.drop("Date", axis = 1, inplace = True)

    #Generating Dummies for SubRegion, Season and Hour columns, concat-ing them to the DF and then Dropping them
    SubRegionDummies = pd.get_dummies(DF["SubRegion"], prefix = "IsSubRegion", dtype = int)
    SeasonDummies = pd.get_dummies(DF["Season"], prefix = "IsSeason", dtype = int)
    HourDummies = pd.get_dummies(DF["Hour"], prefix = "IsHour",dtype = int)

    #Let's Concat to the DataFrame and get rid of the original columns.
    #Note that can also be done by inserting the df as parameter in pd.get_dummies, check the docs.

    DF = pd.concat([DF, SubRegionDummies], axis = 1)
    DF = pd.concat([DF, SeasonDummies], axis = 1)
    DF = pd.concat([DF, HourDummies], axis = 1)

    DF.drop(["SubRegion", "Season", "Hour"], axis = 1, inplace = True)
    
    return DF